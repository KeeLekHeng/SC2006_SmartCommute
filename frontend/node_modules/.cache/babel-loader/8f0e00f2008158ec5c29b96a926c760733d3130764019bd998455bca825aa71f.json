{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\lastest_app\\\\SC2006_SmartCommute\\\\frontend\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState } from 'react';\n// import axios from 'axios';\n\n// export const UserContext = createContext();\n\n// export const UserProvider = ({ children }) => {\n//   // Initialize state with values from localStorage if available\n//   const [user, setUser] = useState(localStorage.getItem('username') || '');\n//   const [gender, setGender] = useState(localStorage.getItem('gender') || '');\n\n//   const setUsername = async (username) => {\n//     if (username) {\n//       setUser(username);\n//       localStorage.setItem('username', username);\n\n//       try {\n//         // Ensure this route in your backend correctly returns user details, including gender\n//         const response = await axios.get(`http://localhost:4000/authRoutes/user/${username}`);\n\n//         if (response.status === 200 && response.data) {\n//           const { gender } = response.data; // Extract gender from response\n//           setGender(gender);\n//           localStorage.setItem('gender', gender); // Store gender in localStorage\n//         } else {\n//           console.warn('No gender information found in the response');\n//         }\n//       } catch (error) {\n//         console.error('Error fetching user details:', error);\n//       }\n//     }\n//   };\n\n//   const logout = () => {\n//     // Clear user data from state and localStorage\n//     setUser('');\n//     setGender('');\n//     localStorage.removeItem('username');\n//     localStorage.removeItem('gender');\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ user, setUsername, gender, logout }}>\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\nimport React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize state with values from localStorage if available\n  const [user, setUser] = useState(localStorage.getItem('username') || '');\n  const [gender, setGender] = useState(localStorage.getItem('gender') || '');\n  const setUsername = async username => {\n    if (username) {\n      setUser(username);\n      localStorage.setItem('username', username);\n      try {\n        // Ensure this route in your backend correctly returns user details, including gender\n        const response = await axios.get(`http://localhost:4000/authRoutes/user/${username}`);\n        if (response.status === 200 && response.data) {\n          const {\n            gender\n          } = response.data; // Extract gender from response\n          setGender(gender);\n          localStorage.setItem('gender', gender); // Store gender in localStorage\n        } else {\n          console.warn('No gender information found in the response');\n        }\n      } catch (error) {\n        console.error('Error fetching user details:', error);\n      }\n    }\n  };\n  const logout = () => {\n    // Clear user data from state and localStorage\n    setUser('');\n    setGender('');\n    localStorage.removeItem('username');\n    localStorage.removeItem('gender');\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUsername,\n      gender,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"bzBLZ0ohbowwkoxplD2nX+jdkf0=\");\n_c = UserProvider;\nexport const UseContext = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(UseContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = UseContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"UseContext\");","map":{"version":3,"names":["React","createContext","useState","useContext","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","localStorage","getItem","gender","setGender","setUsername","username","setItem","response","get","status","data","console","warn","error","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","UseContext","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/james/lastest_app/SC2006_SmartCommute/frontend/src/context/UserContext.js"],"sourcesContent":["// import React, { createContext, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// export const UserContext = createContext();\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   // Initialize state with values from localStorage if available\r\n//   const [user, setUser] = useState(localStorage.getItem('username') || '');\r\n//   const [gender, setGender] = useState(localStorage.getItem('gender') || '');\r\n\r\n//   const setUsername = async (username) => {\r\n//     if (username) {\r\n//       setUser(username);\r\n//       localStorage.setItem('username', username);\r\n\r\n//       try {\r\n//         // Ensure this route in your backend correctly returns user details, including gender\r\n//         const response = await axios.get(`http://localhost:4000/authRoutes/user/${username}`);\r\n        \r\n//         if (response.status === 200 && response.data) {\r\n//           const { gender } = response.data; // Extract gender from response\r\n//           setGender(gender);\r\n//           localStorage.setItem('gender', gender); // Store gender in localStorage\r\n//         } else {\r\n//           console.warn('No gender information found in the response');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching user details:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     // Clear user data from state and localStorage\r\n//     setUser('');\r\n//     setGender('');\r\n//     localStorage.removeItem('username');\r\n//     localStorage.removeItem('gender');\r\n//   };\r\n\r\n//   return (\r\n//     <UserContext.Provider value={{ user, setUsername, gender, logout }}>\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n\r\n\r\nimport React, { createContext, useState, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const UserContext = createContext();\r\n\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  // Initialize state with values from localStorage if available\r\n  const [user, setUser] = useState(localStorage.getItem('username') || '');\r\n  const [gender, setGender] = useState(localStorage.getItem('gender') || '');\r\n\r\n  const setUsername = async (username) => {\r\n    if (username) {\r\n      setUser(username);\r\n      localStorage.setItem('username', username);\r\n\r\n      try {\r\n        // Ensure this route in your backend correctly returns user details, including gender\r\n        const response = await axios.get(`http://localhost:4000/authRoutes/user/${username}`);\r\n        \r\n        if (response.status === 200 && response.data) {\r\n          const { gender } = response.data; // Extract gender from response\r\n          setGender(gender);\r\n          localStorage.setItem('gender', gender); // Store gender in localStorage\r\n        } else {\r\n          console.warn('No gender information found in the response');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user details:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear user data from state and localStorage\r\n    setUser('');\r\n    setGender('');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('gender');\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUsername, gender, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const UseContext = () => useContext(UserContext);"],"mappings":";;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAG1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;EACxE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;EAE1E,MAAMG,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAIA,QAAQ,EAAE;MACZN,OAAO,CAACM,QAAQ,CAAC;MACjBL,YAAY,CAACM,OAAO,CAAC,UAAU,EAAED,QAAQ,CAAC;MAE1C,IAAI;QACF;QACA,MAAME,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,yCAAyCH,QAAQ,EAAE,CAAC;QAErF,IAAIE,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAIF,QAAQ,CAACG,IAAI,EAAE;UAC5C,MAAM;YAAER;UAAO,CAAC,GAAGK,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClCP,SAAS,CAACD,MAAM,CAAC;UACjBF,YAAY,CAACM,OAAO,CAAC,QAAQ,EAAEJ,MAAM,CAAC,CAAC,CAAC;QAC1C,CAAC,MAAM;UACLS,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC;QAC7D;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAf,OAAO,CAAC,EAAE,CAAC;IACXI,SAAS,CAAC,EAAE,CAAC;IACbH,YAAY,CAACe,UAAU,CAAC,UAAU,CAAC;IACnCf,YAAY,CAACe,UAAU,CAAC,QAAQ,CAAC;EACnC,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,IAAI;MAAEM,WAAW;MAAEF,MAAM;MAAEY;IAAO,CAAE;IAAAlB,QAAA,EAChEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CAxCWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA0CzB,OAAO,MAAM4B,UAAU,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACI,WAAW,CAAC;AAAA;AAAC8B,GAAA,CAA3CD,UAAU;AAAAE,GAAA,GAAVF,UAAU;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}