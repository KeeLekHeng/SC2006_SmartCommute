const Search = require('../models/searchModel');
const mongoose = require('mongoose');

// Get all Searches
const getSearches = async (req, res) => {
    const searches = await Search.find({}).sort({ createdAt: -1 });
    res.status(200).json(searches);
};


const saveSearch = async (req, res) => { 
    const { start_Location, destination} = req.body; 

    try { 
        const newSearch = await Search.create({ 
            start_Location: start_Location, destination: destination,
        }); 
        res.status(201).json({message: 'Search saved successfully', search: newSearch }); 
    } catch (error) { 
        res.status(400).json({error: error.message}); 
    }
}; 


// Get a single search
const getSearch = async (req, res) => {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: "No such searches" });
    }

    const search = await Search.findById(id);

    if (!search) {
        return res.status(404).json({ error: "No results found" });
    }

    res.status(200).json(search);
};

// Create a search favourite
const createFavourites = async (req, res) => {
    const { start_location, destination } = req.body;

    try {
        const search = await Search.create({ start_location, destination });
        res.status(200).json(search);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};

// Delete a favourite
const deleteFavourite = async (req, res) => {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: "No such searches" });
    }

    const search = await Search.findOneAndDelete({ _id: id });

    if (!search) {
        return res.status(404).json({ error: "No results found" });
    }

    res.status(200).json(search);
};

// Update a favourite
const updateFavourite = async (req, res) => {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: "No such searches" });
    }

    const search = await Search.findOneAndUpdate(
        { _id: id },
        { ...req.body },
        { new: true } // Return the updated document
    );

    if (!search) {
        return res.status(404).json({ error: "No results found" });
    }

    res.status(200).json(search);
};

// Export the functions
module.exports = {
    createFavourites,
    getSearches,
    getSearch,
    deleteFavourite,
    updateFavourite, 
    saveSearch, 
};